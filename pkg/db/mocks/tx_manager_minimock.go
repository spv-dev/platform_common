// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/spv-dev/auth/internal/client/db.TxManager -o tx_manager_minimock.go -n TxManagerMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_db "github.com/spv-dev/auth/internal/client/db"
)

// TxManagerMock implements mm_db.TxManager
type TxManagerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcReadCommited          func(ctx context.Context, f mm_db.Handler) (err error)
	funcReadCommitedOrigin    string
	inspectFuncReadCommited   func(ctx context.Context, f mm_db.Handler)
	afterReadCommitedCounter  uint64
	beforeReadCommitedCounter uint64
	ReadCommitedMock          mTxManagerMockReadCommited
}

// NewTxManagerMock returns a mock for mm_db.TxManager
func NewTxManagerMock(t minimock.Tester) *TxManagerMock {
	m := &TxManagerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReadCommitedMock = mTxManagerMockReadCommited{mock: m}
	m.ReadCommitedMock.callArgs = []*TxManagerMockReadCommitedParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTxManagerMockReadCommited struct {
	optional           bool
	mock               *TxManagerMock
	defaultExpectation *TxManagerMockReadCommitedExpectation
	expectations       []*TxManagerMockReadCommitedExpectation

	callArgs []*TxManagerMockReadCommitedParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TxManagerMockReadCommitedExpectation specifies expectation struct of the TxManager.ReadCommited
type TxManagerMockReadCommitedExpectation struct {
	mock               *TxManagerMock
	params             *TxManagerMockReadCommitedParams
	paramPtrs          *TxManagerMockReadCommitedParamPtrs
	expectationOrigins TxManagerMockReadCommitedExpectationOrigins
	results            *TxManagerMockReadCommitedResults
	returnOrigin       string
	Counter            uint64
}

// TxManagerMockReadCommitedParams contains parameters of the TxManager.ReadCommited
type TxManagerMockReadCommitedParams struct {
	ctx context.Context
	f   mm_db.Handler
}

// TxManagerMockReadCommitedParamPtrs contains pointers to parameters of the TxManager.ReadCommited
type TxManagerMockReadCommitedParamPtrs struct {
	ctx *context.Context
	f   *mm_db.Handler
}

// TxManagerMockReadCommitedResults contains results of the TxManager.ReadCommited
type TxManagerMockReadCommitedResults struct {
	err error
}

// TxManagerMockReadCommitedOrigins contains origins of expectations of the TxManager.ReadCommited
type TxManagerMockReadCommitedExpectationOrigins struct {
	origin    string
	originCtx string
	originF   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReadCommited *mTxManagerMockReadCommited) Optional() *mTxManagerMockReadCommited {
	mmReadCommited.optional = true
	return mmReadCommited
}

// Expect sets up expected params for TxManager.ReadCommited
func (mmReadCommited *mTxManagerMockReadCommited) Expect(ctx context.Context, f mm_db.Handler) *mTxManagerMockReadCommited {
	if mmReadCommited.mock.funcReadCommited != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by Set")
	}

	if mmReadCommited.defaultExpectation == nil {
		mmReadCommited.defaultExpectation = &TxManagerMockReadCommitedExpectation{}
	}

	if mmReadCommited.defaultExpectation.paramPtrs != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by ExpectParams functions")
	}

	mmReadCommited.defaultExpectation.params = &TxManagerMockReadCommitedParams{ctx, f}
	mmReadCommited.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReadCommited.expectations {
		if minimock.Equal(e.params, mmReadCommited.defaultExpectation.params) {
			mmReadCommited.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReadCommited.defaultExpectation.params)
		}
	}

	return mmReadCommited
}

// ExpectCtxParam1 sets up expected param ctx for TxManager.ReadCommited
func (mmReadCommited *mTxManagerMockReadCommited) ExpectCtxParam1(ctx context.Context) *mTxManagerMockReadCommited {
	if mmReadCommited.mock.funcReadCommited != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by Set")
	}

	if mmReadCommited.defaultExpectation == nil {
		mmReadCommited.defaultExpectation = &TxManagerMockReadCommitedExpectation{}
	}

	if mmReadCommited.defaultExpectation.params != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by Expect")
	}

	if mmReadCommited.defaultExpectation.paramPtrs == nil {
		mmReadCommited.defaultExpectation.paramPtrs = &TxManagerMockReadCommitedParamPtrs{}
	}
	mmReadCommited.defaultExpectation.paramPtrs.ctx = &ctx
	mmReadCommited.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReadCommited
}

// ExpectFParam2 sets up expected param f for TxManager.ReadCommited
func (mmReadCommited *mTxManagerMockReadCommited) ExpectFParam2(f mm_db.Handler) *mTxManagerMockReadCommited {
	if mmReadCommited.mock.funcReadCommited != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by Set")
	}

	if mmReadCommited.defaultExpectation == nil {
		mmReadCommited.defaultExpectation = &TxManagerMockReadCommitedExpectation{}
	}

	if mmReadCommited.defaultExpectation.params != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by Expect")
	}

	if mmReadCommited.defaultExpectation.paramPtrs == nil {
		mmReadCommited.defaultExpectation.paramPtrs = &TxManagerMockReadCommitedParamPtrs{}
	}
	mmReadCommited.defaultExpectation.paramPtrs.f = &f
	mmReadCommited.defaultExpectation.expectationOrigins.originF = minimock.CallerInfo(1)

	return mmReadCommited
}

// Inspect accepts an inspector function that has same arguments as the TxManager.ReadCommited
func (mmReadCommited *mTxManagerMockReadCommited) Inspect(f func(ctx context.Context, f mm_db.Handler)) *mTxManagerMockReadCommited {
	if mmReadCommited.mock.inspectFuncReadCommited != nil {
		mmReadCommited.mock.t.Fatalf("Inspect function is already set for TxManagerMock.ReadCommited")
	}

	mmReadCommited.mock.inspectFuncReadCommited = f

	return mmReadCommited
}

// Return sets up results that will be returned by TxManager.ReadCommited
func (mmReadCommited *mTxManagerMockReadCommited) Return(err error) *TxManagerMock {
	if mmReadCommited.mock.funcReadCommited != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by Set")
	}

	if mmReadCommited.defaultExpectation == nil {
		mmReadCommited.defaultExpectation = &TxManagerMockReadCommitedExpectation{mock: mmReadCommited.mock}
	}
	mmReadCommited.defaultExpectation.results = &TxManagerMockReadCommitedResults{err}
	mmReadCommited.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReadCommited.mock
}

// Set uses given function f to mock the TxManager.ReadCommited method
func (mmReadCommited *mTxManagerMockReadCommited) Set(f func(ctx context.Context, f mm_db.Handler) (err error)) *TxManagerMock {
	if mmReadCommited.defaultExpectation != nil {
		mmReadCommited.mock.t.Fatalf("Default expectation is already set for the TxManager.ReadCommited method")
	}

	if len(mmReadCommited.expectations) > 0 {
		mmReadCommited.mock.t.Fatalf("Some expectations are already set for the TxManager.ReadCommited method")
	}

	mmReadCommited.mock.funcReadCommited = f
	mmReadCommited.mock.funcReadCommitedOrigin = minimock.CallerInfo(1)
	return mmReadCommited.mock
}

// When sets expectation for the TxManager.ReadCommited which will trigger the result defined by the following
// Then helper
func (mmReadCommited *mTxManagerMockReadCommited) When(ctx context.Context, f mm_db.Handler) *TxManagerMockReadCommitedExpectation {
	if mmReadCommited.mock.funcReadCommited != nil {
		mmReadCommited.mock.t.Fatalf("TxManagerMock.ReadCommited mock is already set by Set")
	}

	expectation := &TxManagerMockReadCommitedExpectation{
		mock:               mmReadCommited.mock,
		params:             &TxManagerMockReadCommitedParams{ctx, f},
		expectationOrigins: TxManagerMockReadCommitedExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReadCommited.expectations = append(mmReadCommited.expectations, expectation)
	return expectation
}

// Then sets up TxManager.ReadCommited return parameters for the expectation previously defined by the When method
func (e *TxManagerMockReadCommitedExpectation) Then(err error) *TxManagerMock {
	e.results = &TxManagerMockReadCommitedResults{err}
	return e.mock
}

// Times sets number of times TxManager.ReadCommited should be invoked
func (mmReadCommited *mTxManagerMockReadCommited) Times(n uint64) *mTxManagerMockReadCommited {
	if n == 0 {
		mmReadCommited.mock.t.Fatalf("Times of TxManagerMock.ReadCommited mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReadCommited.expectedInvocations, n)
	mmReadCommited.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReadCommited
}

func (mmReadCommited *mTxManagerMockReadCommited) invocationsDone() bool {
	if len(mmReadCommited.expectations) == 0 && mmReadCommited.defaultExpectation == nil && mmReadCommited.mock.funcReadCommited == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReadCommited.mock.afterReadCommitedCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReadCommited.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReadCommited implements mm_db.TxManager
func (mmReadCommited *TxManagerMock) ReadCommited(ctx context.Context, f mm_db.Handler) (err error) {
	mm_atomic.AddUint64(&mmReadCommited.beforeReadCommitedCounter, 1)
	defer mm_atomic.AddUint64(&mmReadCommited.afterReadCommitedCounter, 1)

	mmReadCommited.t.Helper()

	if mmReadCommited.inspectFuncReadCommited != nil {
		mmReadCommited.inspectFuncReadCommited(ctx, f)
	}

	mm_params := TxManagerMockReadCommitedParams{ctx, f}

	// Record call args
	mmReadCommited.ReadCommitedMock.mutex.Lock()
	mmReadCommited.ReadCommitedMock.callArgs = append(mmReadCommited.ReadCommitedMock.callArgs, &mm_params)
	mmReadCommited.ReadCommitedMock.mutex.Unlock()

	for _, e := range mmReadCommited.ReadCommitedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReadCommited.ReadCommitedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReadCommited.ReadCommitedMock.defaultExpectation.Counter, 1)
		mm_want := mmReadCommited.ReadCommitedMock.defaultExpectation.params
		mm_want_ptrs := mmReadCommited.ReadCommitedMock.defaultExpectation.paramPtrs

		mm_got := TxManagerMockReadCommitedParams{ctx, f}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReadCommited.t.Errorf("TxManagerMock.ReadCommited got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadCommited.ReadCommitedMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.f != nil && !minimock.Equal(*mm_want_ptrs.f, mm_got.f) {
				mmReadCommited.t.Errorf("TxManagerMock.ReadCommited got unexpected parameter f, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadCommited.ReadCommitedMock.defaultExpectation.expectationOrigins.originF, *mm_want_ptrs.f, mm_got.f, minimock.Diff(*mm_want_ptrs.f, mm_got.f))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReadCommited.t.Errorf("TxManagerMock.ReadCommited got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReadCommited.ReadCommitedMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReadCommited.ReadCommitedMock.defaultExpectation.results
		if mm_results == nil {
			mmReadCommited.t.Fatal("No results are set for the TxManagerMock.ReadCommited")
		}
		return (*mm_results).err
	}
	if mmReadCommited.funcReadCommited != nil {
		return mmReadCommited.funcReadCommited(ctx, f)
	}
	mmReadCommited.t.Fatalf("Unexpected call to TxManagerMock.ReadCommited. %v %v", ctx, f)
	return
}

// ReadCommitedAfterCounter returns a count of finished TxManagerMock.ReadCommited invocations
func (mmReadCommited *TxManagerMock) ReadCommitedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadCommited.afterReadCommitedCounter)
}

// ReadCommitedBeforeCounter returns a count of TxManagerMock.ReadCommited invocations
func (mmReadCommited *TxManagerMock) ReadCommitedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadCommited.beforeReadCommitedCounter)
}

// Calls returns a list of arguments used in each call to TxManagerMock.ReadCommited.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReadCommited *mTxManagerMockReadCommited) Calls() []*TxManagerMockReadCommitedParams {
	mmReadCommited.mutex.RLock()

	argCopy := make([]*TxManagerMockReadCommitedParams, len(mmReadCommited.callArgs))
	copy(argCopy, mmReadCommited.callArgs)

	mmReadCommited.mutex.RUnlock()

	return argCopy
}

// MinimockReadCommitedDone returns true if the count of the ReadCommited invocations corresponds
// the number of defined expectations
func (m *TxManagerMock) MinimockReadCommitedDone() bool {
	if m.ReadCommitedMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReadCommitedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReadCommitedMock.invocationsDone()
}

// MinimockReadCommitedInspect logs each unmet expectation
func (m *TxManagerMock) MinimockReadCommitedInspect() {
	for _, e := range m.ReadCommitedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TxManagerMock.ReadCommited at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReadCommitedCounter := mm_atomic.LoadUint64(&m.afterReadCommitedCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReadCommitedMock.defaultExpectation != nil && afterReadCommitedCounter < 1 {
		if m.ReadCommitedMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TxManagerMock.ReadCommited at\n%s", m.ReadCommitedMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TxManagerMock.ReadCommited at\n%s with params: %#v", m.ReadCommitedMock.defaultExpectation.expectationOrigins.origin, *m.ReadCommitedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadCommited != nil && afterReadCommitedCounter < 1 {
		m.t.Errorf("Expected call to TxManagerMock.ReadCommited at\n%s", m.funcReadCommitedOrigin)
	}

	if !m.ReadCommitedMock.invocationsDone() && afterReadCommitedCounter > 0 {
		m.t.Errorf("Expected %d calls to TxManagerMock.ReadCommited at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReadCommitedMock.expectedInvocations), m.ReadCommitedMock.expectedInvocationsOrigin, afterReadCommitedCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TxManagerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockReadCommitedInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TxManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TxManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReadCommitedDone()
}
